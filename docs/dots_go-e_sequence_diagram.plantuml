@startuml
skinparam sequencemessagealign reversedirection

skinparam backgroundColor #EEEBDC
'skinparam handwritten true

actor "simulation requester" as sim_req
participant so [
    = simulation-orchestrator
    ----
    Python FastAPI
]
participant mso [
    = model-services-orchestrator
    ----
    Python Asyncio
]
participant "calculation service 1" as model_1
participant "calculation service 2" as model_2

database "influxdb database" as influxdb
participant deploy_plane [
    = kubernetes
    ----
    deployment backplane
]

activate mso #limegreen
activate so #seagreen
activate influxdb #gold
activate deploy_plane #3970e4

note over so
    continuously checks calc step runtime
    and stops the simulation when max exceeded
end note
/ note over mso
    continuously checks the status of the
    calculation model pods and deletes pods
    on completion (after 'keep_log_hours')
end note

sim_req -> so : create simulation (http POST request): \n\
- simulation setup\n\
- ESDL file \n\
- calculation services definition

so -> so : generate simulation id
so --> sim_req : http POST response with simulation id
so -> so : parse ESDL & calc services for esdl objects

    group deploy
    so -> mso : 'deploymodels' for calc services (mqtt)
    mso -> deploy_plane : instruct to deploy calculation service model containers with env var deployment parameters (python api)

    create model_1
    deploy_plane -> model_1 : deploys container with env var deploy params for esdl object 1
    create model_1
    deploy_plane -> model_1 : deploys container with env var deploy params for esdl object 2
    create model_1
    deploy_plane -> model_1 : deploys container with env var deplot params for esdl object 'n'
    activate model_1 #lightblue
    create model_2
    deploy_plane -> model_2 : deploys container with env var deploy params for esdl object
    activate model_2 #lightblue

    model_2 -> model_2 : subscribe to messages from the SO
    model_1 -> mso : readyforprocessing ('n' times) (mqtt)
    model_2 -> mso

    mso -> so : modelsready (mqtt)
    end

so -> so : if all models are deployed: start simulation

    group configure
    so -> model_1 : 'ModelParameters', i.a. ESDL ('n' times) (mqtt)
    so -> model_2 :

    model_1 -> model_1 : configure
    model_2 -> model_2 : configure
        note right
            - parse ESDL, get object parameter values
            - subscribe to message topics from
              connected calculation service models
            - service specific pre-simulation configuration
        end note

    model_1 -> influxdb : connect to influxdb
    model_2 -> influxdb

    model_1 -> so : 'Parameterized' ('n' times) (mqtt)
    model_2 -> so : 'Parameterized' ('n' times) (mqtt)
    end

so -> so : if all models are configured: start simulation

    group simulation loop
    so -> model_1 : 'NewStep', step start/end time, number ('n' times) (mqtt)
    so -> model_2 :

        group#tomato time step calculation sequence
        model_1 -> model_1 : start calculation(s) when\n required data received
        model_1 <-> model_2 : send data messages (mqtt)
        model_2 -> model_2 : start calculation(s) when\nrequired data received
        end

    sim_req -> so: http GET/DELETE '/simulation_id' requests
        note right
           on termination exit simulation loop:
           partial results are written to influxdb
        end note
    so --> sim_req: http GET/DELETE response: status/progress

    model_2 -> so : 'CalculationsDone' ('n' times) (mqtt)
    model_1 -> so :

    so -> so : start new step if all calculations are done
    end

so -> model_1 : if all time steps are finished: 'SimulationDone' ('n' times) (mqtt)
so -> model_2 :
model_1 -> influxdb : write to influxdb
model_2 -> influxdb :
model_1 -> deploy_plane : status of pods to 'Succeeded'
deactivate model_1
destroy model_1
deactivate model_2
destroy model_2

sim_req -> deploy_plane : (optional) view calculation services logs (Lens)
mso -> deploy_plane : delete pods when 'keep_log_hours' have passed after completion of the simulation

sim_req -> influxdb : download and view simulation results (Grafana)

'hide footbox
@enduml
