@startuml
skinparam sequencemessagealign reversedirection
skinparam backgroundColor transparent
'skinparam backgroundColor #EEEBDC

skinparam actorBackgroundColor Gold

'skinparam handwritten true

actor "simulation requester" as sim_req
participant so [
    = simulation-orchestrator
    ----
    Python FastAPI
]
participant mso [
    = model-services-orchestrator
    ----
    Python Asyncio
]
participant "calculation service A" as service_A
participant "calculation service B" as service_B

database "influxdb database" as influxdb
participant deploy_plane [
    = kubernetes
    ----
    deployment backplane
]

activate mso #limegreen
activate so #seagreen
activate influxdb #gold
activate deploy_plane #3970e4

note over so
    continuously checks calc step runtime
    and stops the simulation when max exceeded
end note
/ note over mso
    continuously checks the status of the
    calculation model pods and deletes pods
    on completion (after 'keep_log_hours')
end note

sim_req -> so : create simulation (http POST request): \n\
- simulation setup\n\
- energy system ESDL file \n\
- calculation services definition

so -> so : generate simulation id
so --> sim_req : http POST response with simulation id
so -> so : parse ESDL & calculation services\n\
distribute ESDL objects over calc models

    group deploy
    so -> mso : 'deploymodels' for calc services (mqtt)
    mso -> deploy_plane : instruct to deploy calculation service model containers with env var deployment parameters (Kubernetes Python Client)

    create service_A
    deploy_plane -> service_A : deploys container with env var deploy params for calc_service_A model 1
    create service_A
    deploy_plane -> service_A : deploys container with env var deploy params for calc_service_A model 2
    create service_A
    deploy_plane -> service_A : deploys container with env var deploy params for calc_service_A model 'n'
    activate service_A #lightblue
    create service_B
    deploy_plane -> service_B : deploys container with env var deploy params
    activate service_B #lightblue

    service_A -> service_A : subscribe to messages from the SO
    service_B -> service_B :
    service_A -> mso : readyforprocessing ('n' times) (mqtt)
    service_B -> mso

    mso -> so : modelsready (mqtt)
    end

so -> so : if all models are deployed: start simulation

    group configure
    so -> service_A : 'ModelParameters' ('n' times) (mqtt):\n\
    - list of ESDL object id's in calculation model\n\
    - ESDL file\n\
    - calculation services definition
    so -> service_B :

    service_A -> service_A : configure
    service_B -> service_B : configure:\n\
    - subscribe to message topics from\n\
      all connected ESDL objects\n\
    - setup influxdb output

    service_A -> influxdb : connect to influxdb
    service_B -> influxdb

    service_A -> so : 'Parameterized' ('n' times) (mqtt)
    service_B -> so : 'Parameterized' ('n' times) (mqtt)
    end

so -> so : if all models are configured: start simulation

    group simulation loop
    so -> service_A : 'NewStep', step start/end time, number ('n' times) (mqtt)
    so -> service_B :

        group#tomato time step calculation sequence
        service_A -> service_A : start calculation(s) when all\nexpected data received
        service_A <-> service_B : send data messages (mqtt)
        service_B -> service_B : start calculation(s) when\nrequired data received
        end

    sim_req -> so: http GET/DELETE '/simulation_id' requests
        note right
           on termination exit simulation loop:
           partial results are written to influxdb
        end note
    so --> sim_req: http GET/DELETE response: status/progress

    service_B -> so : 'CalculationsDone' ('n' times) (mqtt)
    service_A -> so :

    so -> so : start new step if all calculations are done
    end

so -> service_A : if all time steps are finished: 'SimulationDone' ('n' times) (mqtt)
so -> service_B :
service_A -> influxdb : write to influxdb
service_B -> influxdb :
service_A -> deploy_plane : status of pods to 'Succeeded'
deactivate service_A
destroy service_A
deactivate service_B
destroy service_B

sim_req <- deploy_plane : (optional) view calculation services logs (Lens)
mso -> deploy_plane : delete pods when 'keep_log_hours' have passed after completion of the simulation (Kubernetes Python Client)

sim_req <- influxdb : download and view simulation results (Grafana)

'hide footbox
@enduml
