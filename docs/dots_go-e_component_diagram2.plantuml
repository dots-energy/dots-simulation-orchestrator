@startuml
skinparam defaultTextAlignment center
skinparam backgroundColor #EEEBDC
'skinparam arrowFontName Courier
'skinparam legendFontName Courier
'skinparam actorFontName Courier
'skinparam cloudFontName Courier
'skinparam componentFontName Courier
'skinparam handwritten true
skinparam actorBackgroundColor Gold

actor "model developer" as developer
actor "simulation\nuser" as simulator

[<img:./images/gitlab.png{scale=0.11}>     <img:./images/github.png{scale=0.08}>\nCalculation\nService Repos] as repos
[<img:./images/cookiecutter.png{scale=0.32}>\nCalculation\nService Generator] as generator

cloud "Azure Kubernetes Service\n<img:./images/aks.png{scale=0.1}>" as aks {
    [<img:./images/k8s.png{scale=0.1}>\nModel Service\nOrchestrator] as mso
    [<img:./images/fastapi_logo.png{scale=0.32}>\nSimulation\nOrchestrator] as so
    node "<img:./images/python.png{scale=0.02}>\nCalculation models:\n<img:./images/arrow_double.png{scale=0.25}> model IO data" as models
    [<img:./images/grafana.png{scale=0.05}>\nDashboard] as grafana

    mso <-d- so: deploy models\ninformation
    models <--> so: lifecycle\ncommands
    models <-l- mso: deploy

    database "<img:./images/influxdb_crop.png{scale=0.21}>" {
        [Simulation results] as results
    }
    models --> results: write to\ndatabase
    results --> grafana

}

mso <.l. repos: pull image

generator ..> repos: create boiler\nplate project

developer .> generator: <img:./images/docker.png{scale=0.4}>'docker run'
developer ..> repos: implement\nlogic

so <.l. simulator: HTTP: Start Simulation\n<img:./images/esdl_logo_large.png{scale=0.1}>
'grafana <.l. simulator: HTTP: visualize data
simulator <.. simulator: <img:./images/lens-logo-icon.png{scale=0.1}>\n view logs

legend bottom right
    All cluster internal communication via:
    <img:./images/arrow.png{scale=0.2}>
    <img:./images/mosquitto.png{scale=0.32}> <img:./images/protobuf.png{scale=0.25}>
endlegend

@enduml
